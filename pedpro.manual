PURPOSE: pedigree processing
USAGE  : __PROGRAM_NAME__ [Options] > Output
DETAILS:
__SINGLE_LINE__ __PRTXTFMT_INDENT__3

_____ About Pedigree File _____ 

__PROGRAM_NAME__ reads pedigree data from a tab- or space-delimited text file. In this file, each line corresponds to one person, and each column is a variable. The first line is called the header line, from which __PROGRAM_NAME__ identifies the contents of each column by matching headers to known variable names. Columns that are not recognized as pre-defined variables will still be read and stored in memory for writing outputs later. You can type "__PROGRAM_NAME__ --var-name" to see the default names of pre-defined variables. Below is an example of the --var-name output. __PROGRAM_NAME__ tries to match only the first 4 characters of a header with the first 4 characters of a variable Symbol or one of the Synonyms in a case-insensitive fashion. So it is quite flexible in recognizing pre-defined variables. For example, the header of a "father" column could be Father, Fath, Fth, Dad, Fa, Pa, PaID; the "Pedigree" column could be named PedID, Pedigree, Family, PID, FID, PED, FAM, Kindred; "Individual" could be IndID, Individual, IID, IND, ID, Subject, Person; etc.

# Format: Space- or tab-delimited; Multiple delimiters are treated as one.
# Lines begin with # are comments. Nothing will be read after a blank line.
# =========================================================================
# Description    Type ID   Symbol  Synonyms(<=4characters)
# =========================================================================
Pedigree_ID      STR  PID  PedID   pedi pid p_id ped fami fid f_id fam kind
Individual_ID    STR  IID  IndID   indi iid i_id ind id subj pers
Unique_ID        STR  UID  UniqID  uniq uid u_id
Father_ID        STR  FTH  Father  fath fth dad fa pa PaID
Mother_ID        STR  MTH  Mother  moth mth mom mo ma MaID
Sex              DBL  SEX  Gender  gend sex sx sex_
Affection_Status DBL  AFF  Aff     affe aff af aff_
Liability        DBL  LIA  Liab    liab lia li lia_
Proband          DBL  PRB  Proband prob prb pr prb_
Allele_1         DBL  AL1  AL1     al1 a1
Allele_2         DBL  AL2  AL2     al2 a2
...
# =========================================================================

There are two ways to customize variable names of pre-defined variables. 1) write your own <PREFIX>.var_name.txt file. Here, <PREFIX> is defined by --prefix. The default prefix is "__PROGRAM_NAME__". __PROGRAM_NAME__ first looks for this file in the current directory. If failed, then uses the default variable names. You can type "__PROGRAM_NAME__ --var-name > MyProject.var_name.txt", modify MyProject.var_name.txt, then run "__PROGRAM_NAME__ --prefix MyProject". In MyProject.var_name.txt, you can change the Symbol or Synonyms so that the program can recognize your variables. You can also remove some of the variables so that the program do not read them as pre-defined variables. 2) use the option ---XXX=yyy. Here XXX is the variable ID; yyy is the new variable name. For example, --AFF=BrCa tells the program to obtain affection status from the column "BrCa", which stands for breast cancer. Again, type "__PROGRAM_NAME__ --var-name" to see the variable IDs.

If the input pedigree file does not contain a header line, you must use the "--ped-nh" option, which requires two arguments: filename and headers. The headers is a list of header names divided by a comma. For example, you can read a standard LINKAGE pedigree file (before makeped) by "--ped-nh prefile.txt pid,iid,fa,mo,sx,af,li", or equivalently, "--ped-nh prefile.txt l7". Here l7 is a short name for "linkage format 7 columns". Type "__PROGRAM_NAME__ --var-name" for more details. __PROGRAM_NAME__ can also read pedigree data from the standard input rather than from a file. If so, the input must contain the header line. Here is an example command line: "cat ped.txt | __PROGRAM_NAME__". Note that __PROGRAM_NAME__ reads from the standard input only when neither --ped nor --ped-nh is used.

The input pedigree file should have at least three columns: Father_ID, Mother_ID, and either an Individual_ID (IID) or a Unique_ID (UID). IIDs are unique within each pedigree; while UIDs are unique in the whole database. If a Pedigree_ID (PID) column does not exist, each input file is deemed a pedigree. If the IID column does not exist, IIDs will be the same as UIDs. If the UID column does not exist, a UID will be created as PID::IID. If a person's IID/UID is an empty string, __PROGRAM_NAME__ will assign a name to the subject.

In reading input, this program has the following features:
> Search for FILE / FILE.gz / FILE.bz2 sequentially
> Directly read .gz / .bz2 files
> Robust to all newline characters (Unix, Mac, DOS)
> Robust to no newline characters at the end of a file
> Skip any lines begin with a '#' (by default)
> Stop at the first blank line (by default) or skip all blank lines
> Multiple delimiters are allowed (default is tab and space, set by -d)
> Treat successive delimiters as one (not by default, set by -s)
> Ignore leading white-spaces or trailing empty fields (not by default)
> Warn about unequal number-of-fields between lines (by default)
Please see options "FOR FILE READING" below for more details.

_____ About pedigree output _____ 

It has two options for writing pedigrees, --wr and --wr-rai. The former writes all individuals, including those added or created by the program (missing parents or dummy parents, respectively), but not those ignored by the program (same-parents) or removed by the user (single-parent, separated individuals or uninformative individuals). With this option, the original pedigree order is maintained, but the individuals are sorted so that older generations are always written before their offsprings. The latter writes the same individuals as input and in the same order. By either options, the output destination is standard output, which is convenient for command piping or output redirecting. The output has a header line with column names specified in the "Output" column of the file <PREFIX>.var_name.txt. Fields are delimited by the first delimiter assigned by the "-d" option, which is a single TAB by default. Therefore, it is easy to change the format of the file, e.g., the example below converts a fix-width space-delimited file to a CSV file. Suppose you have a file in LINKAGE format before MAKEPED. It has 8 columns with headers PID,IID,FA,MO,SEX,AFF,A1,A2. The last two columns are genotypes for a marker. The following command will read the file and then write to a CSV file:
  __PROGRAM_NAME__ -s -d', \t' --trim-lws --ped input.txt --wr l6,other > output.csv

Please note that, in the output genotypes for created individuals are missing, which are represented by an empty string. This program does not provide an option to set the default missing value, as it can be easily changed by other programs or scripts.

_____ About pedigree errors _____ 

__PROGRAM_NAME__ detects problems and tries to correct them. Potential problems are listed below. __PROGRAM_NAME__ reports errors for '#'s, warnings for '>'s and '-'s, and none for '.'s. Solutions are listed in "[]", if there're any.

# Files missing Father_ID / Mother_ID / (IID or UID) [program stops]
# Lines with ID problems (PID is empty/0/.) [skip the line and continue]
# Failures to create UIDs / dummy spouses [program stops]
# Self-ancestors (A=>..=>A) [program stops]
# Same-parents (mom and dad are the same person) [founderize offsprings]
# Self-parent (one is oneself's father or mother) [founderize the persons]
# Ambiguous-gender (being a father of one person, and mother of another)
# Impossible monozygosity twins (wrong code, diff parent/sex, #-of-sibs !=2)
# Improbable Year-of-birth (mother <8 or >70, fathers <12 or >90 years old)
# Failures to infer missing Year-of-birth (e.g., due to a 3-digit YOB)
# Wrong liability class (<1) and wrong affection status (!=0,1,2)
# Wrong number of probands in a family (!=1)
> Re-input of the same individual [update fa,mo,sex,etc.]
> Re-input of the same family [merge family members]
> Identical UIDs [suffix with _01, _02, and so on]
> Potential mistyping of IIDs in wrong letter case
> Questionable IIDs (all IIDs never show up as Father_IDs or Mother_IDs)
> Multiple clusters of individuals within a family
- Single parent [founderize / create a dummy spouse / use the known spouse]
- Wrong gender [rectify automatically]
. Missing parents [add automatically]

The codes for twins are the same as the program BOADICEA or MENDEL, which should be integers starting from 1. However, __PROGRAM_NAME__ doesn't check whether the codes are successive and start from 1. In addition, monozygosity twin status is not considered when calculating relationships.

There are 3 options to solve a single-parent problem: create a dummy parent, use a known spouse, founderize the offsprings. In creating dummy spouses, __PROGRAM_NAME__ always assumes that each single-parent has only 1 dummy spouse for all offspring sibs, which has IID XXX_01, where XXX is the IID of the single-parent. If XXX_01 already exists, then XXX_02, and so on.

In a pedigree file, it's always a good practice to list all pedigree members together. If the lines for different pedigrees intermingle with each other, __PROGRAM_NAME__ will report a warning "Re-input family xxx". If intermingling is not expected, this may come from overlapping FIDs between recruitment institutes, and may lead to severe problems because these families are merged.

Some pedigree errors may lead to reduced connectivity among family members; therefore, it's always good to check for "multiple clusters" (see below). Furthermore, "Re-input individual", "questionable IIDs" and "mistyping of IIDs" warnings are also worth checking.

_____ About log file _____ 

The file <PREFIX>.log records all operations, errors, warnings and corrections done by the program. However, this file may be very long. To reduce its length, one can suppress some expected warnings with the option -Wno-gender, -Wno-single, -Wno-re-inp, or -w. Alternatively, groups of records can be filtered by the Unix "grep" command with a pattern: single-parent, self-parent, same-parents, wrong-gender, self-ancestor, clusters, circle, aff= (wrong affection status), lia= (wrong liability class), twin (impossible monozygosity twins), probands (wrong number of probands), improbable YOB, Infer YOB, ambiguous-gender, Re-input individual, Re-input family, update (updates by re-inputting the same person), IIDs (questionable IIDs), UIDs (identical UIDs / failure to create one), ID problem (FID/IID/UID is empty/0), [Rr]emove (persons that have been removed). In addition, errors or warnings can be filtered by Err and Wrn, respectively.

_____ About multiple clusters / isolated persons _____ 

Some data may have multiple unconnected families under the same Pedigree_ID. This may be a sign of problems. __PROGRAM_NAME__ can detect it and show a warning for each such pedigree. Each cluster is assigned a unique cluster_ID. If the --wr argument has a "cl" field, the output file contains and is sorted by the cluster_ID, which can be used as a pedigree_ID in the next run.

This feature can also be used to divide a big pedigree into sub-pedigrees, e.g., to identify high-risk sub-pedigrees for a disease, within which any two affected persons are connected by a sequence of affected 1-/2-/3-degree relatives. The corresponding command is "--cl-out cl,id,pa,ma,sx --cl-aff". Different from the "--wr cl,.." option, this method may assign an individual to multiple clusters, and so he/she may be printed in multiple lines. Again, the output is sorted by cluster_IDs.

Another potential structural problem is isolated individuals, who are not connected to any other persons in the pedigree. __PROGRAM_NAME__ can show them in the output if the --wr argument contains the "sep" field. They can also be removed by the --rm-sep option.

_____ About circles and loops _____

For simplicity, in this program a loop is a consanguinity loop, while a circle is a marriage loop. For example, a circle is formed if two brothers married two sisters separately. They are legal and common in the real world, but could cause difficulties for some software such as MelaPRO and SLINK. __PROGRAM_NAME__ can look for circles between two nuclear families within up to three generations.

For example, suppose we have a family shown below. A circle is formed if one of these pairs of individuals married: 8-5 / 3-2 / 8-2 / 6-9. This program can detect all of them, but not beyond 10's grandparents. The option --br-circle can be used to break all circles by founderizing a minimum number of individuals per circle. These individuals are selected by the following criteria sequentially: minimum number of sibs; unaffected; minimum number of affected first-degree relatives. If >1 individual fulfills these criteria, then __PROGRAM_NAME__ randomly selects one of them. This procedure is repeated until no circle remains. The option --br-loop uses a similar approach to break loops.

  1-+-2       3-+-4
    |           |
  +-+-+     +---+---+
  |   |     |   |   |
 f5  m6--+--7  m8  f9
         |
         10
(Parent on the left is father unless otherwise specified: f=female, m=male.)

Beware, a small loop (avuncular marriage) may also appears to be a circle, for which this program will report a warning for both a loop and a circle.

_____ About uninformative individuals _____ 

The following persons are uninformative for linkage analysis: 1) unaffected ungenotyped founders with only 1 informative child; 2) unaffected ungenotyped individuals without any informative child. The --rm-uninf option can be used to remove them. Because this function may lead to separated individuals, --rm-sep is automatically activated along with --rm-uninf.

_____ About year-of-birth _____ 

__PROGRAM_NAME__ uses known YOBs to infer missing YOB data (9999/0). If all family members have a missing YOB, then a default number is assigned to all probands in the family, even when there're more than one probands. Therefore, please make sure that all probands of a family are of the same generation. If there is no proband in a family, an error will be reported, and the family is skipped. Missing YOB is inferred based on the following criteria: 1) min and max value is calculated from relatives whose YOB is known, assuming that women have children at 18-45 years old and men at 18-55; 2) mean value is calculated from first-degree relatives and spouses, assuming that a generation is 30 years; 3) if the mean value is between min and max, then the inferred YOB is the mean value; otherwise, min or max. __PROGRAM_NAME__ infers YOB for one person at a time until all family members are done. It always starts from the most informative individual in each family (having the largest number of relatives whose YOBs are known).
__PRTXTFMT_INDENT__0
__SINGLE_LINE__ __PRTXTFMT_HANGING__19
__PROGRAM_NAME__ OPTIONS (will be executed sequentially):

Settings:
  -Wno-single      Suppress warnings of single-parents (still show how to fix)
  -Wno-gender      Suppress warnings of wrong-genders that are corrigible
  -Wno-re-inp      Suppress warnings of re-input pedigrees or individuals
  -Wno-subped      Suppress warnings of 2+ disconnected pedigrees per PID
  -Wno-dupUID      Suppress warnings of Identical UIDs
  -w               Suppress all warnings
  -a               Read pedigree data aggregately. By this option, the program will not founderize a person if the person has multiple inputs, where in the latter input he/she has no parents. This option is useful for merging connected families into one pedigree.
 --create-dummy    Always create a dummy parent when fixing single-parents problems. Will turn on when reading a Pedigree File from stdin.
 --ma-age=I-I      Maternal age range for error detection, default is 8-70
 --pa-age=I-I      Paternal age range for error detection, default is 12-90
 --cl-out Vs       Set output variables for --cl-uid and --cl-aff. Should be set before --cl-uid and --cl-aff.
 --cl-dgr INT      Set degree of relatives for --cl-uid and --cl-aff. Should be set before --cl-uid and --cl-aff. {3}
 --id-del=S        Set the delimiter between PID and IID for making UIDs {::}. For example, by default the UID of ped1 indA will be ped1::indA.
 --var-known Vs    Keep only Vs as known (pre-defined) variables.
 --XXX=yyyy        Convert variable names. Here XXX is the variable ID, yyyy is the new variable name. See --var-name output for IDs of pre-defined variables. For example, --AFF=BrCa will make the program read affection status from a column named "BrCa". Be careful, this my mask an existing variable. For example, if you do "--PID=Cluster --cl-out cl,id,fa,mo,sx,af --cl-aff", the first column in the output will not be the new cluster ID but the pedigree ID (eq. to the old cluster ID). 
 --cvt S           Convert variable contents. This option lets the program flexibly read contents of pre-defined variables. S is the instruction for content conversion. Format of S is variable_name1:text_1/text_2/..=value1,text_i/text_i+1/..=value2;varialbe_name2... For example, the default S is sex:m/M/male/Male=1,f/F/female/Female=2;aff:affected/aff/y/Y/yes/Yes=2,unaffected/unaff/n/N/no/No=1. This means in the SEX column, "m", "M", "male" and "Male" will be converted to 1, while "f", "F", "female" and "Female" will be converted to 2. It should be noted that a=b,b=c is safe, which means the program will not convert "a" to "c" by changing "a" to "b" then "b" to "c".
 --create-dummy    Always create a dummy individual for single-parent problems.

Read inputs (choose one. If you choose none, __PROGRAM_NAME__ will read from standard input):
 --ped FILEs       Read pedigree data from FILEs, the 1st line is the header
 --ped-nh FILE Vs  Read pedigree data from FILE w/o header, Vs=variable names
 --fast-add Ss     Add a person related to an anchor person. Ss is PedID,IndID,relation,affection_status,age,genotype,disease,comment.
 --id-prefix S     Individual_ID prefix for --fast-add {A}.

Do somthing (multiple choices are allowed):
 --keep-unaff      Keep unaffected sibs in doing --rm-uninf (below)
 --rm-uninf        Remove uninformative individuals (requires AFF,GTN)
 --rm-sep          Remove separated individuals
 --br-circle       Break circles by founderizing 1+ persons per circle
 --br-loop         Break loops by founderizing 1+ persons per loop
 --yob I           Infer YOB. Probands' YOB=I if all members have missing YOB
 --genedrop        Do random gene dropping
 --ind-wt          Generate individual weights for association test (requires AFF,GTN)

Write outputs (do at most one of the following options):
 --var-name        Write default variable names
 --wr Vs           Write variable (names=Vs) for all pedigrees
 --wr-rai Vs       Write variable (names=Vs) for all pedigrees, rows as input
 --sum-ped         Write pedigree summary statistics
 --wr-alt          Output alternative IDs
 --cl-uid FILE     Cluster individuals listed in FILE (col1=UID), def=ALL
 --cl-aff          Cluster individuals who are affected
 --[q-]kin-all     Cal. kinship & inbreeding coefficient of all INDs [quietly]
 --[q-]kin-of FILE Cal. kinship & inbreeding coefficient of INDs listed in FILE
 --mrca-of FILE    Find the most recent common ancestors of INDs listed in FILE
 --founder-of FILE Find all founders (oldest generation) of INDs listed in FILE
 --oc FILE         Find obligatory carriers, known carriers INDs listed in FILE

